package Reporting

import (
	"bytes"
	"fmt"
	"math/rand"
	"text/template"
	"time"
)

// Report template with placeholders for dynamic content
const reportTemplate = `
Hi!

I discovered that {{ .Subdomain }} was pointing to an unclaimed {{ .WhatWasIt }}, making it vulnerable to subdomain takeover.
I've managed to claim it in my {{ .Account }} account and added a simple HTML file as POC:
{{ .PocURL }}

Archive URL:

https://archive.is/OQoTn

## Mitigation
- Remove the {{ .Mitigation }} record

Best regards,
Brainspiller

## Impact
Subdomain takeovers can be used for:
- Account takeovers (cookies set to {{ .RootDomain }} will be shared with this subdomain and can be obtained)
- Stored XSS (arbitrary JavaScript code can be executed in a user's browser)
- Phishing
- Hosting malicious content
`

// Data structure to hold the values for the report
type ReportData struct {
	Subdomain  string
	RootDomain string
	PocURL     string
	WhatWasIt  string
	Account    string
	Mitigation string
}

// Generate a random string of length n
func generateRandomString(n int) string {
	const letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	rand.Seed(time.Now().UnixNano())
	b := make([]byte, n)
	for i := range b {
		b[i] = letters[rand.Intn(len(letters))]
	}
	return string(b)
}

// GenerateReport generates a report using the provided data
func GenerateReport(data ReportData) (string, error) {
	tmpl, err := template.New("report").Parse(reportTemplate)
	if err != nil {
		return "", fmt.Errorf("failed to parse report template: %v", err)
	}

	// Generate the PoC URL with a random string of 20 characters
	randomString := generateRandomString(20)
	data.PocURL = fmt.Sprintf("http://%s/%s", data.Subdomain, randomString)

	var report bytes.Buffer
	err = tmpl.Execute(&report, data)
	if err != nil {
		return "", fmt.Errorf("failed to execute report template: %v", err)
	}

	return report.String(), nil
}
